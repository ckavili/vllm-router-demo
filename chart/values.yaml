---
litellm-helm:
  proxy_config:
    model_list:
    - model_name: dcot
      litellm_params:
        model: openai/dcot
        api_key: "test2"
        api_base: https://vllm-noconnor-test.apps.prod.rhoai.rh-aiservices-bu.com/v1
        stop: "<|end of conversation|>" 
    - model_name: doctor
      litellm_params:
        model: openai/doctor
        api_key: "fake-key"
        api_base: os.environ/BASE_API
        temperature: 0.1
        stop: '["<|end|>","<|end of conversation|>]' 
    - model_name: phi2
      litellm_params:
        model: openai/microsoft/phi-2
        api_key: "fake-key"
        api_base: os.environ/BASE_API
        bos_token: "<|endoftext|>"
        eos_token: "<|endoftext|>"
        stop: "<|end|>"
    general_settings: 
    master_key: sk-1234 
    custom_auth: custom_auth.user_api_key_auth
    log_raw_request_response: True
    set_verbose: false
    cache: false
    litellm_settings: # module level litellm settings - https://github.com/BerriAI/litellm/blob/main/litellm/__init__.py
      drop_params: True
      log_raw_request_response: True
      return_response_headers: true
      callbacks: custom_router.proxy_handler_instance

    router_settings:
      num_retries: 2
      timeout: 30
  volumes:
    - name: custom-auth
      configMap:
        name: custom-auth
        items:
          - key: "custom_auth.py"
            path: "custom_auth.py"
    - name: custom-callbacks
      configMap:
        name: custom-callbacks
        items:
          - key: "custom_callbacks.py"
            path: "custom_callbacks.py"
    - name: custom-router
      configMap:
        name: custom-router
        items:
          - key: "custom_router.py"
            path: "custom_router.py"
  volumeMounts:
    - name: custom-auth
      mountPath: /etc/litellm/custom_auth.py
      subPath: custom_auth.py
    - name: custom-callbacks
      mountPath: /etc/litellm/custom_callbacks.py
      subPath: custom_callbacks.py
    - name: custom-router
      mountPath: /etc/litellm/custom_router.py
      subPath: custom_router.py
  postgresql:
    global:
      compatibility:
        openshift:
          adaptSecurityContext: force
    
# to create configmap from python files
proxy_config_files:
  - name: custom_auth.py
  - name: custom_callbacks.py
  - name: custom_router.py